{"/home/travis/build/npmtest/node-npmtest-winston-loggly/test.js":"/* istanbul instrument in package npmtest_winston_loggly */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-winston-loggly/lib.npmtest_winston_loggly.js":"/* istanbul instrument in package npmtest_winston_loggly */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_winston_loggly = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_winston_loggly = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-winston-loggly/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-winston-loggly && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_winston_loggly */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_winston_loggly\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_winston_loggly.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_winston_loggly.rollup.js'] =\n            local.assetsDict['/assets.npmtest_winston_loggly.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_winston_loggly.__dirname + '/lib.npmtest_winston_loggly.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-winston-loggly/node_modules/winston-loggly/lib/winston-loggly.js":"/*\n * loggly.js: Transport for logginh to remote Loggly API\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n *\n */\n\nvar events = require('events'),\n    loggly = require('loggly'),\n    util = require('util'),\n    winston = require('winston'),\n    Stream = require('stream').Stream;\n\n//\n// Remark: This should be at a higher level.\n//\nvar code = /\\u001b\\[(\\d+(;\\d+)*)?m/g;\n\n//\n// ### function Loggly (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Loggly transport object responsible\n// for persisting log messages and metadata to Loggly; 'LaaS'.\n//\nvar Loggly = exports.Loggly = function (options) {\n  options = options || {};\n\n  //\n  // Small amount of backwards compatibility with 0.x.x\n  //\n  if (options.inputToken && !options.token) {\n    options.token = options.inputToken;\n  }\n\n  winston.Transport.call(this, options);\n  if (!options.subdomain) {\n    throw new Error('Loggly Subdomain is required');\n  }\n  else if (!options || !options.token) {\n    throw new Error('Loggly Customer token is required.');\n  }\n\n  this.name   = 'loggly';\n  var tags = options.tags || options.tag || options.id;\n  if (tags && !Array.isArray(tags)) {\n    tags = [tags];\n  }\n\n  this.client = loggly.createClient({\n    subdomain: options.subdomain,\n    auth: options.auth || null,\n    json: options.json || false,\n    proxy: options.proxy || null,\n    token: options.token,\n    tags: tags,\n    isBulk: options.isBulk || false\n  });\n\n  this.timestamp = options.timestamp || false;\n  this.stripColors = options.stripColors || false;\n};\n\n//\n// Inherit from `winston.Transport`.\n//\nutil.inherits(Loggly, winston.Transport);\n\n//\n// Define a getter so that `winston.transports.Loggly`\n// is available and thus backwards compatible.\n//\nwinston.transports.Loggly = Loggly;\n\n//\n// Expose the name of this Transport on the prototype\n//\nLoggly.prototype.name = 'loggly';\n\n//\n// ### function log (level, msg, [meta], callback)\n// #### @level {string} Level at which to log the message.\n// #### @msg {string} Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} Continuation to respond to when complete.\n// Core logging method exposed to Winston. Metadata is optional.\n//\nLoggly.prototype.log = function (level, msg, meta, callback) {\n  if (this.silent) {\n    return callback(null, true);\n  }\n\n  if (this.timestamp && (!meta || !meta.timestamp)) {\n    meta = meta || {};\n    meta.timestamp = (new Date()).toISOString();\n  }\n\n  if (this.stripColors) {\n    msg = ('' + msg).replace(code, '');\n  }\n\n  var message = winston.clone(meta || {}),\n      self    = this;\n\n  message.level = level;\n  message.message = msg;\n\n  //\n  // Helper function for responded to logging.\n  //\n  function logged() {\n    self.emit('logged');\n    callback(null, true);\n  }\n\n  return meta.tags\n    ? this.client.log(message, meta.tags, logged)\n    : this.client.log(message, logged);\n};\n\n//\n// ### function stream (options)\n// #### @options {Object} Set stream options\n// Returns a log stream.\n//\nLoggly.prototype.stream = function(options) {\n  var self = this,\n      options = options || {},\n      stream = new Stream,\n      last,\n      start = options.start,\n      row = 0;\n\n  if (start === -1) {\n    start = null;\n  }\n\n  if (start == null) {\n    last = new Date(0).toISOString();\n  }\n\n  stream.destroy = function() {\n    this.destroyed = true;\n  };\n\n  // Unfortunately, we\n  // need to poll here.\n  (function check() {\n    self.query({\n      from: last || 'NOW-1DAY',\n      until: 'NOW'\n    }, function(err, results) {\n      if (stream.destroyed) return;\n\n      if (err) {\n        stream.emit('error', err);\n        return setTimeout(check, 2000);\n      }\n\n      var result = res[res.length-1];\n      if (result && result.timestamp) {\n        if (last == null) {\n          last = result.timestamp;\n          return;\n        }\n        last = result.timestamp;\n      } else {\n        return func();\n      }\n\n      results.forEach(function(log) {\n        if (start == null || row > start) {\n          stream.emit('log', log);\n        }\n        row++;\n      });\n\n      setTimeout(check, 2000);\n    });\n  })();\n\n  return stream;\n};\n\n//\n// ### function query (options)\n// #### @options {Object} Set stream options\n// #### @callback {function} Callback\n// Query the transport.\n//\n\nLoggly.prototype.query = function (options, callback) {\n  var self = this,\n      context = this.extractContext(options);\n      options = this.loglify(options);\n      options = this.extend(options, context);\n\n  this.client\n    .search(options)\n    .run(function (err, logs) {\n      return err\n        ? callback(err)\n        : callback(null, self.sanitizeLogs(logs));\n    });\n};\n\n//\n// ### function formatQuery (query)\n// #### @query {string|Object} Query to format\n// Formats the specified `query` Object (or string) to conform\n// with the underlying implementation of this transport.\n//\nLoggly.prototype.formatQuery = function (query) {\n  return query;\n};\n\n//\n// ### function formatResults (results, options)\n// #### @results {Object|Array} Results returned from `.query`.\n// #### @options {Object} **Optional** Formatting options\n// Formats the specified `results` with the given `options` accordinging\n// to the implementation of this transport.\n//\nLoggly.prototype.formatResults = function (results, options) {\n  return results;\n};\n\n//\n// ### function extractContext (obj)\n// #### @obj {Object} Options has to extract Loggly 'context' properties from\n// Returns a separate object containing all Loggly 'context properties in\n// the object supplied and removes those properties from the original object.\n// [See Loggly Search API](http://wiki.loggly.com/retrieve_events#optional)\n//\nLoggly.prototype.extractContext = function (obj) {\n  var context = {};\n\n\n   ['start',\n   'from',\n   'until',\n   'order',\n   'callback',\n   'size',\n   'format',\n   'fields'].forEach(function (key) {\n    if (obj[key]) {\n      context[key] = obj[key];\n      delete obj[key];\n    }\n  });\n\n  context = this.normalizeQuery(context);\n  context.from = context.from.toISOString();\n  context.until = context.until.toISOString();\n\n  context.from  = context.from  || '-1d';\n  context.until = context.until || 'now';\n  context.size  = context.size  || 50;\n\n  return context;\n};\n\n\n//\n// ### function loglify (obj)\n// #### @obj {Object} Search query to convert into an `AND` loggly query.\n// Creates an `AND` joined loggly query for the specified object\n//\n// e.g. `{ foo: 1, bar: 2 }` => `json.foo:1 AND json.bar:2`\n//\nLoggly.prototype.loglify = function (obj) {\n  var opts = [];\n\n  Object.keys(obj).forEach(function (key) {\n    if (key !== 'query' &&\n        key !== 'fields' &&\n        key !== 'start' &&\n        key !== 'rows' &&\n        key !== 'limit' &&\n        key !== 'from' &&\n        key !== 'until')\n    {\n        if (key == 'tag') {\n          opts.push(key + ':' + obj[key]);\n        }\n        else {\n          opts.push('json.' + key + ':' + obj[key]);\n       }\n    }\n  });\n\n  if (obj.query) {\n    opts.unshift(obj.query);\n  }\n  return  {'query' : opts.join(' AND ')}\n};\n\n//\n// ### function sanitizeLogs (logs)\n// #### @logs {Object} Data returned from Loggly to sanitize\n// Sanitizes the log information returned from Loggly so that\n// users cannot gain access to critical information such as:\n//\n// 1. IP Addresses\n// 2. Input names\n// 3. Input IDs\n//\nLoggly.prototype.sanitizeLogs = function (logs) {\n  return logs;\n};\n\nLoggly.prototype.extend = function(destination,source) {\n    for (var property in source)\n        destination[property] = source[property];\n    return destination;\n}\n"}